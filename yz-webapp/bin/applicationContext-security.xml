<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:s="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd"
	default-lazy-init="true">

	<description>SpringSecurity安全配置</description>

    <!--Enable security, let the casAuthenticationEntryPoint handle all intercepted urls. 
		 The CAS_FILTER needs to be in the right position within the filter chain.
     -->
     <s:http entry-point-ref="casAuthenticationEntryPoint" auto-config="false">
     	<s:intercept-url pattern="/css/**" filters="none" />
     	<s:intercept-url pattern="/upload/**" filters="none" />
		<s:intercept-url pattern="/img/**" filters="none" />
		<s:intercept-url pattern="/js/**" filters="none" />
	    <s:intercept-url pattern="/study/personalinfo*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/exammanage*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/finishedcourse*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/formallearning.action" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/formallearning!goStudy.action" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/preparecourse*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/studycourse*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/certreq*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/usercert*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/study/mycredit*" access="ROLE_用户登录" />
	    
	    <s:intercept-url pattern="/course/exam*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/cert/certificate!detail*" access="ROLE_用户登录" />
	    <s:intercept-url pattern="/cert/certificate!finish*" access="ROLE_用户登录" />
	    
		<s:intercept-url pattern="/cert/manage/*" access="ROLE_后台管理" />
		<s:intercept-url pattern="/course/manage/*" access="ROLE_后台管理" />
		<s:intercept-url pattern="/admin/**" access="ROLE_后台管理" />	    
	    <s:custom-filter position="CAS_FILTER" ref="casAuthenticationFilter"></s:custom-filter>
	 	<s:logout logout-success-url="${cas.securityContext.logoutUrl}" logout-url="/logout" />
	 </s:http>

	<!--  Required for the casProcessingFilter, so define it explicitly set and
	      specify an Id Even though the authenticationManager is created by 
			 default when namespace based config is used.-->
	<s:authentication-manager alias="authenticationManager">
		<s:authentication-provider ref="casAuthenticationProvider"></s:authentication-provider>
	</s:authentication-manager> 
	
    <bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/loginSuccess.jsp"></property>
		<property name="targetUrlParameter" value="targetUrl"></property>		
	</bean>
	
	<!-- This section is used to configure CAS. The service is the 
		 actual redirect that will be triggered after the CAS login sequence. 22     -->
	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="${cas.securityContext.serviceProperties.service}"></property>
		<property name="sendRenew" value="false"></property>
	</bean>  
	 <!-- The CAS filter handles the redirect from the CAS server and starts the ticket validation. 29     --> 
	<bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager"></property>
		<property name="filterProcessesUrl" value="${cas.securityContext.filterProcessesUrl}"></property>
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"></property>		
    </bean> 
    
	<!--The entryPoint intercepts all the CAS authentication requests.
		It redirects to the CAS loginUrl for the CAS login page. 36     -->
	<bean id="casAuthenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.securityContext.casProcessingFilterEntryPoint.loginUrl}"></property>
		<property name="serviceProperties" ref="serviceProperties"></property> 
	</bean> 
	<!--  42         Handles the CAS ticket processing. 43      --> 
	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService"></property>
		<property name="serviceProperties" ref="serviceProperties"></property>
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
			<constructor-arg index="0" value="${cas.securityContext.ticketValidator.casServerUrlPrefix}"></constructor-arg>
			</bean>
		</property>
		<property name="key" value="cas"></property>
	</bean>

	<!-- 项目实现的用户查询服务 -->
	<bean id="userDetailsService" class="com.drcl.jsstu.user.core.UserDetailsServiceImpl" />
</beans>